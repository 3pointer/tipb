// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: checksum.proto

package tipb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AlgorithmType int32

const (
	AlgorithmType_TypeCrc32Xor AlgorithmType = 0
)

var AlgorithmType_name = map[int32]string{
	0: "TypeCrc32Xor",
}
var AlgorithmType_value = map[string]int32{
	"TypeCrc32Xor": 0,
}

func (x AlgorithmType) Enum() *AlgorithmType {
	p := new(AlgorithmType)
	*p = x
	return p
}
func (x AlgorithmType) String() string {
	return proto.EnumName(AlgorithmType_name, int32(x))
}
func (x *AlgorithmType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AlgorithmType_value, data, "AlgorithmType")
	if err != nil {
		return err
	}
	*x = AlgorithmType(value)
	return nil
}
func (AlgorithmType) EnumDescriptor() ([]byte, []int) { return fileDescriptorChecksum, []int{0} }

type TableCheckSumReq struct {
	Tp               AlgorithmType `protobuf:"varint,1,opt,name=tp,enum=tipb.AlgorithmType" json:"tp"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *TableCheckSumReq) Reset()                    { *m = TableCheckSumReq{} }
func (m *TableCheckSumReq) String() string            { return proto.CompactTextString(m) }
func (*TableCheckSumReq) ProtoMessage()               {}
func (*TableCheckSumReq) Descriptor() ([]byte, []int) { return fileDescriptorChecksum, []int{0} }

func (m *TableCheckSumReq) GetTp() AlgorithmType {
	if m != nil {
		return m.Tp
	}
	return AlgorithmType_TypeCrc32Xor
}

func init() {
	proto.RegisterType((*TableCheckSumReq)(nil), "tipb.TableCheckSumReq")
	proto.RegisterEnum("tipb.AlgorithmType", AlgorithmType_name, AlgorithmType_value)
}
func (m *TableCheckSumReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableCheckSumReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintChecksum(dAtA, i, uint64(m.Tp))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintChecksum(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TableCheckSumReq) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChecksum(uint64(m.Tp))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovChecksum(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChecksum(x uint64) (n int) {
	return sovChecksum(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TableCheckSumReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChecksum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableCheckSumReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableCheckSumReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChecksum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= (AlgorithmType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChecksum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChecksum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChecksum(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChecksum
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChecksum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChecksum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChecksum
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChecksum
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChecksum(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChecksum = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChecksum   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("checksum.proto", fileDescriptorChecksum) }

var fileDescriptorChecksum = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xce, 0x48, 0x4d,
	0xce, 0x2e, 0x2e, 0xcd, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0xc9, 0x2c, 0x48,
	0x92, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x0b, 0xe8, 0x83, 0x58, 0x10, 0x39, 0x25, 0x4b, 0x2e,
	0x81, 0x90, 0xc4, 0xa4, 0x9c, 0x54, 0x67, 0x90, 0x96, 0xe0, 0xd2, 0xdc, 0xa0, 0xd4, 0x42, 0x21,
	0x55, 0x2e, 0xa6, 0x92, 0x02, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x3e, 0x23, 0x61, 0x3d, 0x90, 0x66,
	0x3d, 0xc7, 0x9c, 0xf4, 0xfc, 0xa2, 0xcc, 0x92, 0x8c, 0xdc, 0x90, 0xca, 0x82, 0x54, 0x27, 0x96,
	0x13, 0xf7, 0xe4, 0x19, 0xb4, 0x14, 0xb9, 0x78, 0x51, 0x84, 0x85, 0x04, 0xb8, 0x78, 0x40, 0xb4,
	0x73, 0x51, 0xb2, 0xb1, 0x51, 0x44, 0x7e, 0x91, 0x00, 0x83, 0x93, 0xe6, 0x89, 0x47, 0x72, 0x8c,
	0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c, 0x03, 0x97, 0x68, 0x72,
	0x7e, 0xae, 0x5e, 0x41, 0x66, 0x5e, 0x7a, 0x72, 0x62, 0x81, 0x5e, 0x49, 0x66, 0x4a, 0x12, 0xd8,
	0xfc, 0x00, 0x46, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x72, 0x32, 0x02, 0x37, 0xb5, 0x00, 0x00,
	0x00,
}
